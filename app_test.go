package main

import (
	"bytes"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"net/http/httptest"
	"testing"
)

var a App

func TestMain(m *testing.M) {
	createDatabase()
	err := a.Initialize("postgres", "mysecretpassword", "testdb")
	if err != nil {
		panic("failed to connect database")
	}
	m.Run() // This runs all other tests
}

func createDatabase() {
	dsn := "host=localhost user=postgres password=mysecretpassword port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect to database: " + err.Error())
	}

	// Create the database
	err = db.Exec("DROP DATABASE IF EXISTS testdb WITH (FORCE)").Error
	if err != nil {
		panic("failed to drop database: " + err.Error())
	}

	err = db.Exec("CREATE DATABASE testdb").Error
	if err != nil {
		panic("failed to create database: " + err.Error())
	}

	createTable(db)

	// Close the connection to the default database
	sqlDB, err := db.DB()
	if err != nil {
		panic("failed to get DB instance: " + err.Error())
	}
	sqlDB.Close()

}

func createTable(db *gorm.DB) {
	// connect to the test database
	dsn := "host=localhost user=postgres password=mysecretpassword dbname=testdb port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	err = db.AutoMigrate(&Product{})
	if err != nil {
		panic("failed to create Product table")
	}
}

func clearTable() {
	a.DB.Exec("DELETE from products")
}

func TestGetProduct(t *testing.T) {
	clearTable()
	a.DB.Create(&Product{ID: 1, Name: "chair", Quantity: 100, Price: 200})

	req := httptest.NewRequest("GET", "/product/1", nil)

	// We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.
	rr := httptest.NewRecorder() // records the response generated by HTTP handler
	a.Router.ServeHTTP(rr, req)  // passes the request to the router to match it to the route. reponse generated by handler is captured in rr

	// Check the status code is what we expect.
	if status := rr.Code; status != 200 {
		t.Errorf("handler returned wrong status code: got %v want %v", status, 200)
	} else {
		t.Log("handler returned correct status code 200")
	}

	// Check the response body is what we expect.
	expected := `{"ID":1,"Name":"chair","Quantity":100,"Price":200}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	} else {
		t.Log("handler returned correct body")
	}
}

func TestCreateProduct(t *testing.T) {
	clearTable()

	// Create a new product
	payload := []byte(`{"Name":"chair","Quantity":100,"Price":200}`)

	req := httptest.NewRequest("POST", "/product", bytes.NewBuffer(payload))
	rr := httptest.NewRecorder()
	a.Router.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != 201 {
		t.Errorf("handler returned wrong status code: got %v want %v", status, 201)
	} else {
		t.Log("handler returned correct status code 201")
	}

	// Check the response body is what we expect.
	expected := `{"ID":1,"Name":"chair","Quantity":100,"Price":200}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	} else {
		t.Log("handler returned correct body")
	}
}

func TestDeleteProduct(t *testing.T) {
	clearTable()

	a.DB.Create(&Product{ID: 1, Name: "chair", Quantity: 100, Price: 200})

	req := httptest.NewRequest("GET", "/product/1", nil)
	rr := httptest.NewRecorder()
	a.Router.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != 200 {
		t.Errorf("handler returned wrong status code: got %v want %v", status, 200)
	} else {
		t.Log("handler returned correct status code 200")
	}

	req = httptest.NewRequest("DELETE", "/product/1", nil)
	rr = httptest.NewRecorder()
	a.Router.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != 200 {
		t.Errorf("handler returned wrong status code: got %v want %v", status, 200)
	} else {
		t.Log("handler returned correct status code 204")
	}

	req = httptest.NewRequest("GET", "/product/1", nil)
	rr = httptest.NewRecorder()
	a.Router.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != 404 {
		t.Errorf("handler returned wrong status code: got %v want %v", status, 404)
	} else {
		t.Log("handler returned correct status code 404")
	}
}
